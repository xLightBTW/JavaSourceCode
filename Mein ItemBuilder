package de.xlightbtw.APIS;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Arrays;
import org.bukkit.Color;
import org.bukkit.Material;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.EntityType;
import org.bukkit.inventory.ItemFlag;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BookMeta;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.inventory.meta.ItemMeta.Spigot;
import org.bukkit.inventory.meta.LeatherArmorMeta;
import org.bukkit.inventory.meta.PotionMeta;
import org.bukkit.inventory.meta.SkullMeta;
import org.bukkit.potion.PotionEffectType;

public class ItemBuilder
{
  private ItemStack item;
  
  public ItemBuilder(Material material, int amount)
  {
    this.item = new ItemStack(material, amount);
  }
  
  public ItemBuilder(Material material, int amount, int data)
  {
    this.item = new ItemStack(material, amount, (short)data);
  }
  
  public ItemBuilder(ItemStack item)
  {
    this.item = item;
  }
  
  public ItemBuilder setData(int data)
  {
    this.item.setDurability((short)data);
    return this;
  }
  
  public ItemBuilder setMaterial(Material m)
  {
    this.item.setType(m);
    return this;
  }
  
  public ItemBuilder setAmount(int amount)
  {
    this.item.setAmount(amount);
    return this;
  }
  
  public ItemBuilder setName(String name)
  {
    ItemMeta m = this.item.getItemMeta();
    m.setDisplayName(name);
    this.item.setItemMeta(m);
    return this;
  }
  
  public ItemBuilder setLore(String... lore)
  {
    ItemMeta m = this.item.getItemMeta();
    m.setLore(Arrays.asList(lore));
    this.item.setItemMeta(m);
    return this;
  }
  
  public ItemBuilder setUnbreakable()
  {
    ItemMeta m = this.item.getItemMeta();
    m.spigot().setUnbreakable(true);
    this.item.setItemMeta(m);
    return this;
  }
  
  public ItemBuilder enchant(Enchantment ench, int lvl)
  {
    this.item.addUnsafeEnchantment(ench, lvl);
    return this;
  }
  
  public ItemBuilder addFlags(ItemFlag... flag)
  {
    ItemMeta m = this.item.getItemMeta();
    m.addItemFlags(flag);
    this.item.setItemMeta(m);
    return this;
  }
  
  public ItemBuilder setLeatherColor(Color color)
  {
    LeatherArmorMeta m = (LeatherArmorMeta)this.item.getItemMeta();
    m.setColor(color);
    this.item.setItemMeta(m);
    return this;
  }
  
  public ItemBuilder setSkullOwner(String owner)
  {
    SkullMeta m = (SkullMeta)this.item.getItemMeta();
    m.setOwner(owner);
    this.item.setItemMeta(m);
    return this;
  }
  
  public ItemBuilder setPotionType(PotionEffectType type)
  {
    PotionMeta m = (PotionMeta)this.item.getItemMeta();
    m.setMainEffect(type);
    this.item.setItemMeta(m);
    return this;
  }
  
  public ItemBuilder setBookAuthor(String author)
  {
    BookMeta m = (BookMeta)this.item.getItemMeta();
    m.setAuthor(author);
    this.item.setItemMeta(m);
    return this;
  }
  
  public ItemBuilder setBookContent(String... pages)
  {
    BookMeta m = (BookMeta)this.item.getItemMeta();
    m.setPages(pages);
    this.item.setItemMeta(m);
    return this;
  }
  
  public ItemBuilder setBookTitle(String title)
  {
    BookMeta m = (BookMeta)this.item.getItemMeta();
    m.setTitle(title);
    this.item.setItemMeta(m);
    return this;
  }
  
  public ItemBuilder setBookMeta(String title, String author, String... pages)
  {
    BookMeta m = (BookMeta)this.item.getItemMeta();
    m.setTitle(title);
    m.setAuthor(author);
    m.setPages(pages);
    this.item.setItemMeta(m);
    return this;
  }
  
  public ItemBuilder setEggType(EntityType type)
  {
    if ((this.item != null) && (this.item.getType() == Material.MONSTER_EGG) && (type != null) && (type.getName() != null)) {
      try
      {
        String version = org.bukkit.Bukkit.getServer().getClass().toString().split("\\.")[3];
        Class<?> craftItemStack = Class.forName("org.bukkit.craftbukkit." + version + ".inventory.CraftItemStack");
        
        Object nmsItemStack = craftItemStack.getDeclaredMethod("asNMSCopy", new Class[] { ItemStack.class }).invoke(null, new Object[] { this.item });
        Object nbtTagCompound = Class.forName("net.minecraft.server." + version + ".NBTTagCompound").newInstance();
        
        Field nbtTagCompoundField = nmsItemStack.getClass().getDeclaredField("tag");
        nbtTagCompoundField.setAccessible(true);
        
        nbtTagCompound.getClass().getMethod("setString", new Class[] { String.class, String.class }).invoke(nbtTagCompound, new Object[] { "id", type.getName() });
        nbtTagCompound.getClass().getMethod("set", new Class[] { String.class, Class.forName("net.minecraft.server." + version + ".NBTBase") }).invoke(nbtTagCompoundField.get(nmsItemStack), new Object[] { "EntityTag", nbtTagCompound });
        
        this.item = ((ItemStack)craftItemStack.getDeclaredMethod("asCraftMirror", new Class[] { nmsItemStack.getClass() }).invoke(null, new Object[] { nmsItemStack }));
      }
      catch (Exception ex)
      {
        ex.printStackTrace();
      }
    }
    return this;
  }
  
  public ItemStack build()
  {
    return this.item;
  }
}
